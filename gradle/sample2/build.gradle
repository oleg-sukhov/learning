apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jetty'

version = version = new ProjectVersion(0, 1)
sourceCompatibility = 1.7
ext.versionFile = file('version.properties')

def releaseVersionListener = new ua.vn.os.listeners.ReleaseVersionListener()
gradle.taskGraph.addTaskExecutionGraphListener(releaseVersionListener)

repositories {
	mavenCentral()
}

dependencies {
	compile gradleApi()
    compile localGroovy()
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
	providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = 1.12
}

task srcCompability << {
	println 'Source compatibility -> ' + project.sourceCompatibility
}

task vrs(dependsOn: [srcCompability]) << {
	println 'Project version -> ' + project.version
}

task loadVersion {
	project.version = readVersion()
}

task createDistribution(type: Zip) {
	from war.outputs.files

	from(sourceSets*.allSource) {
		into 'src'
	}

	from(rootDir) {
		include versionFile.name
	}
}

task backupReleaseDistribution(type: Copy) {
	from createDistribution.outputs.files
	into "$buildDir/backup"
}

task incrementProjectVersion(group: 'versioning', description: 'Increment project version...') << {
	String currentVersion = version.ma
}

tasks.addRule("Pattern: increment<Classifier>Version â€“ Increments the project version classifier.") { 
	String taskName -> 
	if(taskName.startsWith('increment') && taskName.endsWith('Version')) {
    	task(taskName) << {
    		String classifier = (taskName - 'increment' - 'Version').toLowerCase()
			String currentVersion = version.toString()

			switch(classifier) {
				case 'major': ++version.major
					break
				case 'minor': ++version.minor
					break
				default: throw new GradleException("Invalid version type '$classifier. Allowed types: ['Major', 'Minor']")
			}
		
			String newVersion = version.toString()
			logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"

			ant.propertyfile(file: versionFile) {
				entry(key: classifier, type: 'int', operation: '+', value: 1)
			}
		}
	}
}

task release(dependsOn: backupReleaseDistribution) << {
	logger.quiet 'Releasing the project...'
}

loadVersion.finalizedBy vrs

ProjectVersion readVersion() {

	if(!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()
    versionFile.withInputStream { stream -> 
    	versionProps.load(stream)
    }
    
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

class ProjectVersion {
    Integer minor
    Integer major
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
    this.major = major
	this.minor = minor
	this.release = Boolean.FALSE
	}

	ProjectVersion(Integer major, Integer minor, Boolean release) {
	this(major, minor)
	this.release = release
	}

	@Override
	String toString() {
		"$major.$minor${release ? '' : '-SNAPSHOT'}"
	}
}
